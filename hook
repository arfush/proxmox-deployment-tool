#!/bin/bash

CONFIG="/tmp/pve-hook-config"

function __yaml_parse {
  local prefix=$2
  local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
  sed -ne "s|^\($s\):|\1|" \
    -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
    -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
  awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
      vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
      printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
    }
  }'
}

function config_parse {
  local id=$1
  local prefix=$2

  grep "^#" /etc/pve/qemu-server/$id.conf | sed 's/^#//' | sed 's/%3A/:/' > "$CONFIG"
  __yaml_parse "$CONFIG" "$prefix" > "$CONFIG"".sh"

  source "$CONFIG"".sh"
}

function log {
  local source=$1
  local message=$2

  printf "<%s> %s\n" "$source" "$message"
}

function target_exec {
  local target=$1
  local command=$2
  local output=$3

  if [[ -z $output ]]; then
    output="/dev/stdout"
  fi

  ssh "$target" "$command" > $output 2> $output
}

function handle_deploy {
  local template_id=$1
  local template_source=$2
  local target_list=$3
  local count=$4
  local prefix_id=$5
  local offset_id=$6
  local offset_ip=$7
  local snapshot=$8

  function handle_deploy_to_node {
    local template_id=$1
    local template_source=$2
    local target=$3
    local count=$4
    local prefix_id=$5
    local offset_id=$6
    local offset_ip=$7
    local snapshot=$8

    for i in $(seq 1 $count); do
      vmid=$(printf "%d%02d" "$prefix_id" "$offset_id")
      stand_id=$(printf "%02d" "$offset_id")
      storage=$(printf "%s-10gbit-cifs" "$target")

      log $target "VM $vmid: Coping..."
      target_exec "$template_source" "qm clone $template_id $vmid --name stand$stand_id --format qcow2 --full --storage $storage --target $target" "/dev/null"
      log $target "VM $vmid: Copied"

      log $target "VM $vmid: Starting..."
      target_exec "$target" "qm start $vmid" "/dev/null"
      log $target "VM $vmid: Stared"

      log $target "VM $vmid: Waiting for QEMU Guest Agent pong"

      target_exec "$target" "qm guest cmd $vmid ping" "/dev/null"
      while [[ $? -ne 0 ]]; do
        target_exec "$target" "qm guest cmd $vmid ping" "/dev/null"
      done

      log $target "VM $vmid: Setting IP configuration"
      cmd="sed -i '/iface vmbr0 inet static/a address 172.16.100.$offset_ip/24\ngateway 172.16.100.1' /etc/network/interfaces"
      target_exec "$target" "qm guest exec $vmid -- $cmd" "/dev/null"

      log $target "VM $vmid: Apply IP configuration"
      target_exec "$target" "qm guest exec $vmid -- systemctl restart networking" "/dev/null"

      if [[ -n $snapshot ]]; then
        log $target "VM $vmid: Taking \"$snapshot\" snapshot"

        target_exec "$target" "qm snapshot $vmid $snapshot --vmstate" "/dev/null"
      fi

      log $target "VM $vmid: Done!"

      let "offset_id = $offset_id + 1"
      let "offset_ip = $offset_ip + 1"

    done
  }

  local target_count=$(echo $target_list | tr ',' ' ' | wc -w)
  let "vm_per_target = $count / $target_count"
  let "vm_extra = $count - ($vm_per_target * $target_count)"

  for target in ${target_list//,/ }; do
    count_target=$vm_per_target
    if [[ $vm_extra -ne 0 ]]; then
      let "count_target = $count_target + 1"
      let "vm_extra = $vm_extra - 1"
    fi

    handle_deploy_to_node                                                                                               \
              $template_id                                                                                              \
              $template_source                                                                                          \
              $target                                                                                                   \
              $count_target                                                                                             \
              $prefix_id                                                                                                \
              $offset_id                                                                                                \
              $offset_ip                                                                                                \
              $snapshot                                                                                                 \
              &

    let "offset_id = $offset_id + $count_target"
    let "offset_ip = $offset_ip + $count_target"
  done
}

function handle_destroy {
  local target_list=$1
  local prefix_id=$2
  local offset_id=$3

  function handle_destroy_to_node {
    local target=$1
    local prefix_id=$2
    local offset_id=$3

    local regex="$prefix_id"
    for n in $(printf "%02d" $offset_id | fold -w1); do
      regex+="[$n-9]"
    done

    vm_list=$(target_exec "$target" "qm list" | grep -o $regex)
    for vm in $vm_list; do
      log "$target" "VM $vm: Stopping..."
      target_exec "$target" "qm stop $vm -s" "/dev/null"
      log "$target" "VM $vm: Stopped"

      log "$target" "VM $vm: Destroying..."
      target_exec "$target" "qm destroy $vm -s -p -d" "/dev/null"
      log "$target" "VM $vm: Destroyed"
    done
  }

  for target in ${target_list//,/ }; do
    handle_destroy_to_node                                                                                              \
              $target                                                                                                   \
              $prefix_id                                                                                                \
              $offset_id                                                                                                \
              &
  done
}

function handle_snapshot {
  local target_list=$1
  local prefix_id=$2
  local offset_id=$3
  local snapshot=$4

  function handle_snapshot_to_node {
    local target=$1
    local prefix_id=$2
    local offset_id=$3
    local snapshot=$4

    local regex="$prefix_id"
    for n in $(printf "%02d" $offset_id | fold -w1); do
          regex+="[$n-9]"
    done

    vm_list=$(target_exec "$target" "qm list" | grep -o $regex)
    for vm in $vm_list; do
      log "$target" "VM $vm: Taking \"$snapshot\" snapshot"
      target_exec "$target" "qm snapshot $vm $snapshot --vmstate" "/dev/null"
      log "$target" "VM $vm: Done"
    done
  }

  for target in ${target_list//,/ }; do
    handle_snapshot_to_node                                                                                              \
              $target                                                                                                   \
              $prefix_id                                                                                                \
              $offset_id                                                                                                \
              "$snapshot"                                                                                                 \
              &
  done
}

function handle_rollback {
  local target_list=$1
  local prefix_id=$2
  local offset_id=$3
  local snapshot=$4

  function handle_rollback_to_node {
    local target=$1
    local prefix_id=$2
    local offset_id=$3
    local snapshot=$4

    local regex="$prefix_id"
    for n in $(printf "%02d" $offset_id | fold -w1); do
          regex+="[$n-9]"
    done

    vm_list=$(target_exec "$target" "qm list" | grep -o $regex)
    for vm in $vm_list; do
      log "$target" "VM $vm: Rollback to \"$snapshot\" snapshot"
      target_exec "$target" "qm rollback $vm $snapshot --start" "/dev/null"
      log "$target" "VM $vm: Done"
    done
  }

  for target in ${target_list//,/ }; do
    handle_rollback_to_node                                                                                              \
              $target                                                                                                   \
              $prefix_id                                                                                                \
              $offset_id                                                                                                \
              "$snapshot"                                                                                               \
              &
  done
}

function main {
  local id=$1
  local phase=$2

  if [[ "$phase" != "pre-start" ]]; then
    return 0
  fi

  config_parse "$id" "CONF_"

  case $CONF_action in
    deploy)
      handle_deploy                                                                                                     \
              $CONF_template_id                                                                                         \
              $CONF_template_source                                                                                     \
              $CONF_target                                                                                              \
              $CONF_count                                                                                               \
              $CONF_id_prefix                                                                                           \
              $CONF_id_offset                                                                                           \
              $CONF_ip_offset                                                                                           \
              $CONF_snapshot
      ;;

    destroy)
      handle_destroy                                                                                                    \
              $CONF_target                                                                                              \
              $CONF_id_prefix                                                                                           \
              $CONF_id_offset
      ;;

    snapshot)
      handle_snapshot                                                                                                   \
            $CONF_target                                                                                                \
            $CONF_id_prefix                                                                                             \
            $CONF_id_offset                                                                                             \
            $CONF_snapshot
      ;;

    rollback)
      handle_rollback                                                                                                   \
            $CONF_target                                                                                                \
            $CONF_id_prefix                                                                                             \
            $CONF_id_offset                                                                                             \
            $CONF_snapshot
      ;;
  esac

  return 0
}

main "$1" "$2"
exit $?
